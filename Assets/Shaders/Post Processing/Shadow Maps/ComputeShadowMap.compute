#pragma kernel CSMain

// I/O

uint2 _ShadowMapResolution;
float2 _ShadowMapCoverage;
float3 _StartPos;
Texture3D _WorldMap;
float3 _LightDir;
float3 _LightUp;
float3 _LightRight;
float _FarPlane;
RWTexture2D<float4> _ShadowMap;

Texture3D<float4> _WorldTexture;
uint3 _WorldTextureSize;

float dstToPlane(float3 rayOrigin, float3 rayDir, float planeY)
{
    // Check if the plane is parallel to the ray
    if (rayDir.y == 0)
    {
        return -1.0f;
    }

    float t = (planeY - rayOrigin.y) / rayDir.y;

    // Check if the plane is behind the ray's origin
    if (t < 0)
    {
        return -1.0f;
    }

    return t;
}

bool isInWorld(float3 pos)
{
    return pos.y <= (float) _WorldTextureSize.y && pos.y >= 0;
}   

float2 rayWorldHit(float3 rayOrigin, float3 rayDir)
{
    // Returns float3 (dist to world, dist inside world, intersection pos)
    float dstTop = dstToPlane(rayOrigin, rayDir, _WorldTextureSize.y);
    float dstBottom = dstToPlane(rayOrigin, rayDir, 0);

    float dstToWorld;
    float dstInsideWorld;

    // If inside the world
    if (isInWorld(rayOrigin))
    {
        dstToWorld = 0;
        // Check if direction is parallel to the planes
        if (rayDir.y == 0) return float2(dstToWorld, 1e10); 
        // Return dist inside world
        return float2(dstToWorld, max(dstTop, dstBottom));
    }

    // If above the world
    if (rayOrigin.y > (float) _WorldTextureSize.y)
    {
        // Check if looking at world
        if (dstTop < 0) return float2(-1, -1);

        dstInsideWorld = dstBottom - dstTop;
        return float2(dstTop, dstInsideWorld);
    }
    // If under the world
    else
    {
        // Check if looking at world
        if (dstBottom < 0) return float2(-1, -1);

        dstInsideWorld = dstTop - dstBottom;
        return float2(dstBottom, dstInsideWorld);
    }
}

// Sample world using world space coordinates
uint sampleWorld(float3 pos)
{
    if (!isInWorld(pos))
    {
        return 0;
    }
    float3 uvw = frac(pos / _WorldTextureSize);
    uint3 texelCoords = (uint3)(uvw * float3(_WorldTextureSize));
    float4 color = _WorldTexture.Load(float4(texelCoords, 0));
    uint blockID = round(color.r * 255);
    return blockID;
}

int3 voxelPos(float3 pos)
{
    return int3(floor(pos.x), floor(pos.y), floor(pos.z));
}

struct rayMarchInfo
{
    float3 pos;
    float depth;
};

rayMarchInfo newRayMarchInfo()
{
    rayMarchInfo info;
    info.pos = float3(0, 0, 0);
    info.depth = 0;
    return info;
}

rayMarchInfo rayMarchWorld(float3 startPos, float3 rayDir)
{
    float2 rayWorldInfo = rayWorldHit(startPos, rayDir);
    float dstToWorld = rayWorldInfo.x;
    float dstInsideWorld = rayWorldInfo.y;
    rayMarchInfo res = newRayMarchInfo();

    // EXIT EARLY
    if (dstInsideWorld <= 0) 
    {
        res.depth = 1e10;
        return res;
    }
    if (dstToWorld > 0)
    {
        startPos = startPos + rayDir * dstToWorld; // Start at intersection point
    }

    int3 voxelIndex = voxelPos(startPos);
    float3 step = sign(rayDir);
    float3 tMax;  // Distance to next voxel boundary
    float3 tMax_old; // Used to get the normals
    float3 tDelta;  // How far we travel to cross a voxel

    // Calculate initial tMax and tDelta for each axis
    [unroll(3)]
    for (int i = 0; i < 3; i++)
    { 
        if (rayDir[i] == 0)
        {
            tMax[i] = 1e10;
            tDelta[i] = 1e10;
        }
        else
        {
            float voxelBoundary = voxelIndex[i] + (step[i] > 0 ? 1 : 0);
            tMax[i] = (voxelBoundary - startPos[i]) / rayDir[i]; 
            tDelta[i] = abs(1.0 / rayDir[i]);
        }
    }

    float dstLimit = min(_FarPlane, dstInsideWorld);
    float dstTravelled = 0;
    int loopCount = 0;
    int hardLoopLimit = (int) dstLimit * 2; // Hack that prevents convergence caused by precision issues or some dark mathematical magic

    [loop]
    while (loopCount++ < hardLoopLimit && dstTravelled < dstLimit)
    {
        // Check the position for a voxel
        float3 rayPos = startPos + rayDir * (dstTravelled + 0.001);
        uint blockID = sampleWorld(rayPos);

        // Return the voxel
        if (blockID > 0)
        {
            res.depth = dstToWorld + dstTravelled;
            res.pos = rayPos;
            return res; 
        }

        // Move to the next voxel
        tMax_old = tMax;
        if (tMax.x < tMax.y && tMax.x < tMax.z)
        {
            dstTravelled = tMax.x;
            tMax.x += tDelta.x;
            voxelIndex.x += step.x;
        }
        else if (tMax.y < tMax.z)
        {
            dstTravelled = tMax.y;
            tMax.y += tDelta.y;
            voxelIndex.y += step.y;
        }
        else
        {
            dstTravelled = tMax.z;
            tMax.z += tDelta.z;
            voxelIndex.z += step.z;
        }
    }

    res.depth = 1e10;
    return res;
}

float2 computeUV(uint3 id)
{
    float ratio = _ShadowMapResolution.x / _ShadowMapResolution.y;
	float2 uv = (float2) id.xy / float2(_ShadowMapResolution);
    uv.x *= ratio;
    uv *= _ShadowMapCoverage;
    uv -= _ShadowMapCoverage / 2.0;
    return uv;
}

float3 computeUV3D(uint3 id)
{
    // Normalize grid indices to range [-0.5, 0.5]
    float2 normalized = (float2(id.xy) / _ShadowMapResolution.xy) - 0.5;

    // Scale normalized coordinates to the coverage area
    float2 scaled = normalized * _ShadowMapCoverage;

    // Calculate the 3D coordinates on the plane using the right and up vectors
    float3 uv3D = _LightRight * scaled.x + _LightUp * scaled.y;

    return uv3D;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 uv = computeUV3D(id);
    float3 startPos = _StartPos + uv;
    // Very edgy hack, otherwise there is an offset due to precision problems.
    // Can be mitigated by increasing shadow map res, but costly
    startPos.z += 0.01;
    startPos.x += 0.01;

    rayMarchInfo rayMarchRes = rayMarchWorld(startPos, _LightDir);
    float shadowMapDepth = rayMarchRes.depth;
    _ShadowMap[id.xy] = float4(shadowMapDepth, shadowMapDepth, shadowMapDepth, 1); 
}